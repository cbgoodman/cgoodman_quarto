{"title":"How to Desaturate Figures for Publication using R","markdown":{"yaml":{"title":"How to Desaturate Figures for Publication using R","date":"2020-02-25","categories":["dataviz","r"],"description":"\"Many academic journals require figures in greyscale. This can be done relatively simply by printing to PDF as greyscale; however, this doesn't give you a) a way to preview what the resulting figure will look like and b) much control over the process of desaturation. If you're making figures in {R}, this process is almost as easy as the more simplistic print to PDF method.\"\n","toc-depth":1},"headingText":"How to desaturate","containsRefs":false,"markdown":"\n\nWe'll need a few extra libraries before we can get started. The primary means we'll use to examine the desaturated figures (and look for issues with colorblindness) is ```colorblindr```. This depends on the development versions of ```cowplot``` and ```colorspace``` (the latter we'll use to desaturate) so we need to make sure those two are install before we install ```colorblindr```.\n\n``` R\ndevtools::install_github(\"wilkelab/cowplot\")\ninstall.packages(\"colorspace\")\ndevtools::install_github(\"clauswilke/colorblindr\")\n```\n\nOnce that's all done, we can load up ```tidyverse``` and our newly installed libraries and get to making a figure. This part is totally up to you, but I've created a very common plot using the included **mtcars** data in ```R```.\n\n```R\nlibrary(tidyverse)\nlibrary(cowplot)\nlibrary(colorspace)\nlibrary(colorblindr)\n\nplot.data <- mtcars\n\np <- ggplot(plot.data, aes(x = wt, y = mpg, color = factor(cyl))) +\n  geom_point(size = 3) +\n  theme_minimal()\n```\n\nThis uses the built in color scheme.\n\n:::{.column-body-outset}\n\n![](../../files/img/desaturate-ex1.png){fig-align=\"center\"}\n\n:::\n\nIf we wanted to desaturate this figure, what would it look like? How would we know if there is appropriate color separation so the reader could determine the various *cyl* levels? ```colorblindr``` gives us two ways to preview this; one static and one interactive.\n\n```R\ncvd_grid(p) # prints grid of colorblind types\nview_cvd(p) # starts an interactive app\n```\n\nAs can be seen below, the standard color palette in ```ggplot``` is ok (but not great) on three of the colorblindness scales, but completely falls flat on desaturation. There's no separation between the number of engine cylinders.\n\n:::{.column-body-outset}\n\n![](../../files/img/desaturate-ex2.png){fig-align=\"center\"}\n\n:::\n\nHow can we fix this? First, we need a new color scale. I am partial to *[viridis](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html)* as it is designed to solve many of the problems outlined above (and built into ```R```).\n\n```R\np.viridis <- p +\n  scale_colour_viridis_d()\n```\n![](../../files/img/desaturate-ex3.png){fig-align=\"center\"}\n\nWhen we subject this new figure to our colorblindness test, it performs much better. Important for our purposes, there is ample separation for desaturation.\n```R\ncvd_grid(p.viridis)\n```\n\n:::{.column-body-outset}\n\n![](../../files/img/desaturate-ex4.png){fig-align=\"center\"}\n\n:::\n\nOnce we have a figure that is amenable to desaturation, how do we do it? That's where ```colorspace``` comes in. It can do far more than we are going to use it for (see the [CRAN vignette for more info](https://cran.r-project.org/web/packages/colorspace/vignettes/colorspace.html)), but it makes desaturating a breeze.\n\n```R\np.des.viridis <- edit_colors(p.viridis, desaturate)\nggdraw(p.des.viridis)\n```\n\nUsing ```edit_colors(foo, desaturate)```, we can completely desaturate our figure. And ```ggdraw``` plots the figure for easy viewing. As can be seen below, our mission is accomplished.\n\n:::{.column-body-outset}\n\n![](img/desaturate-ex5.png){fig-align=\"center\"}\n\n:::\n\nThe last step is to save the figure for upload. I tend to save these files as PDFs; however, the journal likely has its own preferred file format (TIFF being really common).\n\n```R\nggsave(plot=p.des.viridis, \"p_des_viridis.pdf\", dpi=300, device = cairo_pdf)\n```\n\nAnd that's it! Easy, reproducible desaturation (with a brief sidebar into colorblind friendly color palettes).\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"github","toc":true,"toc-depth":1,"output-file":"2022-02-25-desaturate-r-figures.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.38","author-meta":"Christopher B. Goodman","_quarto-vars":{"years":"2013â€“2022","orcid":"0000-0002-8565-9714","github-url":"https://github.com/cbgoodman/"},"theme":{"light":["cosmo","../../html/style.scss"],"dark":["../../html/style-dark.scss"]},"code-block-bg":false,"date-format":"MMMM D, YYYY","title-block-banner":"#3D5266","toc-title":"Contents","toc-location":"left","author":[{"name":"Christopher B. Goodman","url":"https://www.cgoodman.com","orcid":"0000-0002-8565-9714"}],"quarto-template-params":{"banner-header-class":"blog-post"},"title":"How to Desaturate Figures for Publication using R","date":"2020-02-25","categories":["dataviz","r"],"description":"\"Many academic journals require figures in greyscale. This can be done relatively simply by printing to PDF as greyscale; however, this doesn't give you a) a way to preview what the resulting figure will look like and b) much control over the process of desaturation. If you're making figures in {R}, this process is almost as easy as the more simplistic print to PDF method.\"\n"},"extensions":{"book":{"multiFile":true}}}}}